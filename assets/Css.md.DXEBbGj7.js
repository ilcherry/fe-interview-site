import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.DRC4R4Ij.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Css.md","filePath":"Css.md"}'),o={name:"Css.md"};function r(n,l,s,d,p,c){return e(),i("div",null,l[0]||(l[0]=[t('<h2 id="标准文档流-脱离文档流" tabindex="-1">标准文档流&amp;脱离文档流 <a class="header-anchor" href="#标准文档流-脱离文档流" aria-label="Permalink to &quot;标准文档流&amp;脱离文档流&quot;">​</a></h2><p>文档流（Normal Flow） 是 HTML 元素按照默认规则排列 的方式，主要包括：</p><ul><li>块级元素（block）：占满一整行，从上到下排列（如 div、p）。</li><li>行内元素（inline）：按行排列，不会换行（如 span、a）。</li><li>行内块元素（inline-block）：像 inline 一样排列，但可以设置 width 和 height（如 img）。</li></ul><p>某些 CSS 规则会使元素脱离文档流，从而影响布局：</p><ul><li>float</li><li>position: absolute 或 position: fixed</li><li>display: none（不显示元素）</li></ul><h2 id="重绘重排" tabindex="-1">重绘重排 <a class="header-anchor" href="#重绘重排" aria-label="Permalink to &quot;重绘重排&quot;">​</a></h2><p>在浏览器的渲染过程中，重绘（Repaint） 和 重排（Reflow） 是两个关键的性能优化概念。它们会影响页面的渲染效率，从而影响用户体验和页面流畅度</p><p><strong>重绘</strong>发生在元素的外观（颜色、阴影等）发生变化，但不影响布局时。</p><p><strong>重排</strong>发生在元素的几何属性（宽、高、位置）发生变化时，浏览器需要重新计算布局，重新渲染页面</p><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><p>BFC（Block Formatting Context，块级格式化上下文） 是 CSS 视觉渲染中的一种独立的布局环境，它决定了子元素如何排列，以及如何与其他元素相互影响。</p><p>如果一个元素创建了 BFC，它的 内部元素 会独立于外部元素进行布局，不会受到外部元素的影响，也不会影响外部元素。</p><h3 id="bfc-的特点" tabindex="-1">BFC 的特点： <a class="header-anchor" href="#bfc-的特点" aria-label="Permalink to &quot;BFC 的特点：&quot;">​</a></h3><ul><li>内部的 Box 不会影响外部（避免外边距塌陷问题）。</li><li>不会与浮动元素重叠（常用于清除浮动）。</li><li>BFC 区域不会与外部的浮动元素重叠（防止文本环绕浮动元素）。</li><li>BFC 内部元素不会被外部 float 覆盖（用于自适应布局）。</li></ul><h3 id="以下几种情况会创建-bfc" tabindex="-1">以下几种情况会创建 BFC： <a class="header-anchor" href="#以下几种情况会创建-bfc" aria-label="Permalink to &quot;以下几种情况会创建 BFC：&quot;">​</a></h3><ul><li>display: flow-root</li><li>float: left | right</li><li>overflow: hidden | auto | scroll</li><li>position: absolute | fixed</li><li>display: flex | inline-flex</li><li>display: grid | inline-grid</li><li>display: table-cell | table-caption</li></ul><h2 id="css-盒模型" tabindex="-1">CSS 盒模型 <a class="header-anchor" href="#css-盒模型" aria-label="Permalink to &quot;CSS 盒模型&quot;">​</a></h2><p>在 CSS 中，所有的 HTML 元素都被看作是一个矩形的“盒子”，这个盒子由多个部分组成，包括 内容（content）、内边距（padding）、边框（border）和外边距（margin）。这就是 CSS 盒模型（Box Model）</p>',18)]))}const u=a(o,[["render",r]]);export{f as __pageData,u as default};
