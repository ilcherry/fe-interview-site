import{_ as d,c as o,o as e,ae as r}from"./chunks/framework.DRC4R4Ij.js";const g=JSON.parse('{"title":"下面是与原生 JS 有关的知识点汇总","description":"","frontmatter":{},"headers":[],"relativePath":"JS 理论基础.md","filePath":"JS 理论基础.md"}'),a={name:"JS 理论基础.md"};function s(n,t,c,i,h,l){return e(),o("div",null,t[0]||(t[0]=[r('<h1 id="下面是与原生-js-有关的知识点汇总" tabindex="-1">下面是与原生 JS 有关的知识点汇总 <a class="header-anchor" href="#下面是与原生-js-有关的知识点汇总" aria-label="Permalink to &quot;下面是与原生 JS 有关的知识点汇总&quot;">​</a></h1><h2 id="作用域-作用域链-闭包" tabindex="-1">作用域&amp;作用域链&amp;闭包 <a class="header-anchor" href="#作用域-作用域链-闭包" aria-label="Permalink to &quot;作用域&amp;作用域链&amp;闭包&quot;">​</a></h2><p><strong>JS 作用域</strong>是词法作用域，指变量的访问范围。主要分为块作用域、函数作用域、模块作用域和全局作用域</p><p>当 JavaScript 代码需要访问某个变量时,按照嵌套关系从内向外查找变量，直到找到该变量或者到达全局作用域。如果在所有作用域中都找不到变量，则会抛出 ReferenceError</p><p>在 JS 中函数是一等公民，当函数返回函数的时候就形成<strong>闭包</strong></p><h2 id="类与继承和原型链" tabindex="-1">类与继承和原型链 <a class="header-anchor" href="#类与继承和原型链" aria-label="Permalink to &quot;类与继承和原型链&quot;">​</a></h2><h2 id="异步解决方案发展历程" tabindex="-1">异步解决方案发展历程 <a class="header-anchor" href="#异步解决方案发展历程" aria-label="Permalink to &quot;异步解决方案发展历程&quot;">​</a></h2><p>Ajax -&gt; 事件监听 -&gt; Promise -&gt; 生成器方法 -&gt; async/await</p><h2 id="commonjs-vs-esm" tabindex="-1">CommonJS VS ESM <a class="header-anchor" href="#commonjs-vs-esm" aria-label="Permalink to &quot;CommonJS VS ESM&quot;">​</a></h2><table tabindex="0"><thead><tr><th>对比项</th><th><strong>CommonJS (CJS)</strong></th><th><strong>ES Modules (ESM)</strong></th></tr></thead><tbody><tr><td><strong>默认环境</strong></td><td>Node.js（服务器端）</td><td>浏览器 &amp; Node.js</td></tr><tr><td><strong>导出方式</strong></td><td><code>module.exports</code> / <code>exports</code></td><td><code>export</code> / <code>export default</code></td></tr><tr><td><strong>导入方式</strong></td><td><code>require()</code></td><td><code>import</code></td></tr><tr><td><strong>加载方式</strong></td><td>同步（适用于服务器）</td><td>异步（适用于浏览器）</td></tr><tr><td><strong>执行时机</strong></td><td>运行时（<code>require</code> 是动态的）</td><td>编译时（<code>import</code> 是静态的）</td></tr><tr><td><strong>能否部分导入</strong></td><td>不能按需加载（除非使用解构）</td><td>可以按需导入特定的部分</td></tr><tr><td><strong>是否支持 <code>top-level await</code></strong></td><td>❌ 不支持</td><td>✅ 支持</td></tr><tr><td><strong>Tree Shaking</strong></td><td>❌ 不支持（Node.js 直接运行所有代码）</td><td>✅ 支持（浏览器可优化未使用代码）</td></tr><tr><td><strong>适用场景</strong></td><td>服务器端（Node.js）</td><td>现代浏览器、前端项目</td></tr></tbody></table>',10)]))}const p=d(a,[["render",s]]);export{g as __pageData,p as default};
