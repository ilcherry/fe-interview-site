import{_ as e,c as t,o as r,ae as h}from"./chunks/framework.DRC4R4Ij.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"算法题.md","filePath":"算法题.md"}'),o={name:"算法题.md"};function i(l,a,n,d,s,c){return r(),t("div",null,a[0]||(a[0]=[h('<h2 id="两数之和" tabindex="-1">两数之和 <a class="header-anchor" href="#两数之和" aria-label="Permalink to &quot;两数之和&quot;">​</a></h2><p>题目：给定一个数组 nums 和一个目标值 target，在该数组中找出和为目标值的两个数 输入：nums: [8, 2, 6, 5, 4, 1, 3] ； target:7 输出：[2, 5]</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h2 id="三数之和" tabindex="-1">三数之和 <a class="header-anchor" href="#三数之和" aria-label="Permalink to &quot;三数之和&quot;">​</a></h2><h2 id="大数相加" tabindex="-1">大数相加 <a class="header-anchor" href="#大数相加" aria-label="Permalink to &quot;大数相加&quot;">​</a></h2><h2 id="合并两个有序数组" tabindex="-1">合并两个有序数组 <a class="header-anchor" href="#合并两个有序数组" aria-label="Permalink to &quot;合并两个有序数组&quot;">​</a></h2><h2 id="版本号排序" tabindex="-1">版本号排序 <a class="header-anchor" href="#版本号排序" aria-label="Permalink to &quot;版本号排序&quot;">​</a></h2><h2 id="第一个不重复的字符" tabindex="-1">第一个不重复的字符 <a class="header-anchor" href="#第一个不重复的字符" aria-label="Permalink to &quot;第一个不重复的字符&quot;">​</a></h2><h2 id="字符串所有排列组合" tabindex="-1">字符串所有排列组合 <a class="header-anchor" href="#字符串所有排列组合" aria-label="Permalink to &quot;字符串所有排列组合&quot;">​</a></h2><h2 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-label="Permalink to &quot;冒泡排序&quot;">​</a></h2><h2 id="选择排序" tabindex="-1">选择排序 <a class="header-anchor" href="#选择排序" aria-label="Permalink to &quot;选择排序&quot;">​</a></h2><h2 id="插入排序" tabindex="-1">插入排序 <a class="header-anchor" href="#插入排序" aria-label="Permalink to &quot;插入排序&quot;">​</a></h2><h2 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-label="Permalink to &quot;快速排序&quot;">​</a></h2><h2 id="归并排序" tabindex="-1">归并排序 <a class="header-anchor" href="#归并排序" aria-label="Permalink to &quot;归并排序&quot;">​</a></h2><h2 id="列表转树" tabindex="-1">列表转树 <a class="header-anchor" href="#列表转树" aria-label="Permalink to &quot;列表转树&quot;">​</a></h2><h2 id="深度优先遍历" tabindex="-1">深度优先遍历 <a class="header-anchor" href="#深度优先遍历" aria-label="Permalink to &quot;深度优先遍历&quot;">​</a></h2><h2 id="广度优先遍历" tabindex="-1">广度优先遍历 <a class="header-anchor" href="#广度优先遍历" aria-label="Permalink to &quot;广度优先遍历&quot;">​</a></h2><h2 id="树形结构查找节点" tabindex="-1">树形结构查找节点 <a class="header-anchor" href="#树形结构查找节点" aria-label="Permalink to &quot;树形结构查找节点&quot;">​</a></h2><h2 id="二叉查找树" tabindex="-1">二叉查找树 <a class="header-anchor" href="#二叉查找树" aria-label="Permalink to &quot;二叉查找树&quot;">​</a></h2><h2 id="买卖股票问题" tabindex="-1">买卖股票问题 <a class="header-anchor" href="#买卖股票问题" aria-label="Permalink to &quot;买卖股票问题&quot;">​</a></h2><h2 id="滑动窗口最大值" tabindex="-1">滑动窗口最大值 <a class="header-anchor" href="#滑动窗口最大值" aria-label="Permalink to &quot;滑动窗口最大值&quot;">​</a></h2><h2 id="最长递增子序列" tabindex="-1">最长递增子序列 <a class="header-anchor" href="#最长递增子序列" aria-label="Permalink to &quot;最长递增子序列&quot;">​</a></h2>',22)]))}const q=e(o,[["render",i]]);export{b as __pageData,q as default};
