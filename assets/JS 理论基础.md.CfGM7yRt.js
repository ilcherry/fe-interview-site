import{_ as e,c as r,o,ae as a}from"./chunks/framework.DRC4R4Ij.js";const m=JSON.parse('{"title":"下面是与原生 JS 有关的知识点汇总","description":"","frontmatter":{},"headers":[],"relativePath":"JS 理论基础.md","filePath":"JS 理论基础.md"}'),d={name:"JS 理论基础.md"};function s(l,t,i,n,c,p){return o(),r("div",null,t[0]||(t[0]=[a('<h1 id="下面是与原生-js-有关的知识点汇总" tabindex="-1">下面是与原生 JS 有关的知识点汇总 <a class="header-anchor" href="#下面是与原生-js-有关的知识点汇总" aria-label="Permalink to &quot;下面是与原生 JS 有关的知识点汇总&quot;">​</a></h1><h2 id="作用域-作用域链-闭包" tabindex="-1">作用域&amp;作用域链&amp;闭包 <a class="header-anchor" href="#作用域-作用域链-闭包" aria-label="Permalink to &quot;作用域&amp;作用域链&amp;闭包&quot;">​</a></h2><p><strong>JS 作用域</strong>是词法作用域，指变量的访问范围。主要分为块作用域、函数作用域、模块作用域和全局作用域</p><p>当 JavaScript 代码需要访问某个变量时,按照嵌套关系从内向外查找变量，直到找到该变量或者到达全局作用域。如果在所有作用域中都找不到变量，则会抛出 ReferenceError</p><p>在 JS 中函数是一等公民，当函数返回函数的时候就形成<strong>闭包</strong></p><h2 id="类与继承和原型链" tabindex="-1">类与继承和原型链 <a class="header-anchor" href="#类与继承和原型链" aria-label="Permalink to &quot;类与继承和原型链&quot;">​</a></h2><p>在 JavaScript 中，每个对象都有一个原型，这个原型也是一个对象，并且它可以继续拥有自己的原型，形成<strong>原型链</strong>,原型链是 JavaScript 继承的核心机制。如果一个对象本身没有某个属性或方法，JavaScript 会沿着原型链向上查找，直到 null</p><p>ES6 引入 class 语法，它是基于原型的语法糖，提供更清晰的面向对象写法。class 只是 prototype 的语法糖，本质上仍然基于原型继承</p><h2 id="异步解决方案发展历程" tabindex="-1">异步解决方案发展历程 <a class="header-anchor" href="#异步解决方案发展历程" aria-label="Permalink to &quot;异步解决方案发展历程&quot;">​</a></h2><ul><li>回调函数（Callback） 是最早的异步处理方式，典型应用是 XMLHttpRequest（XHR），即传统 Ajax 请求</li><li>事件监听（Event Listener） 允许通过 addEventListener 监听事件，如 click、load、error 等</li><li>Promise 是 ES6 引入的异步解决方案，提供 .then() 和 .catch() 方法，使代码更具可读性，并避免 回调地狱（Callback Hell）</li><li>生成器（Generator） 允许函数暂停和恢复执行，结合 yield 和 next() 可以逐步执行异步操作，让异步代码更像同步代码</li><li>async/await 是基于 Promise 的语法糖，提供最接近同步代码的异步处理方式，避免 then() 链式调用，使更清晰</li></ul><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><p>在 JavaScript 中，Promise 对象表示一个异步操作，它有 三种状态：</p><ol><li>Pending → Fulfilled（调用 resolve(value)）</li><li>Pending → Rejected（调用 reject(error)）</li><li>Fulfilled / Rejected 状态一旦确定，就不可再更改！</li></ol><p>Promise 是 JavaScript 处理异步操作的对象，它提供了多个方法来创建、控制和管理异步流程。主要包括以下 7 个方法：</p><h2 id="📌-promise-的常用方法" tabindex="-1"><strong>📌 Promise 的常用方法</strong> <a class="header-anchor" href="#📌-promise-的常用方法" aria-label="Permalink to &quot;**📌 Promise 的常用方法**&quot;">​</a></h2><p><code>Promise</code> 是 JavaScript 处理异步操作的对象，它提供了多个方法来创建、控制和管理异步流程。主要包括以下 <strong>7 个方法</strong>：</p><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>作用</strong></th><th><strong>返回时机</strong></th></tr></thead><tbody><tr><td><code>Promise.resolve(value)</code></td><td>创建已成功的 Promise</td><td>立即</td></tr><tr><td><code>Promise.reject(error)</code></td><td>创建已失败的 Promise</td><td>立即</td></tr><tr><td><code>Promise.all([p1, p2])</code></td><td>等待全部成功，失败则返回错误</td><td>所有 Promise 结束</td></tr><tr><td><code>Promise.allSettled([p1, p2])</code></td><td>返回所有 Promise 的状态和结果</td><td>所有 Promise 结束</td></tr><tr><td><code>Promise.race([p1, p2])</code></td><td>返回<strong>最先执行完成</strong>的 Promise 结果</td><td>第一个完成</td></tr><tr><td><code>Promise.any([p1, p2])</code></td><td>返回<strong>第一个成功</strong>的结果</td><td>第一个成功</td></tr><tr><td><code>then()</code></td><td>处理成功结果</td><td>成功后</td></tr><tr><td><code>catch()</code></td><td>处理失败结果</td><td>失败后</td></tr><tr><td><code>finally()</code></td><td>无论成功或失败都会执行</td><td>结束后</td></tr></tbody></table><h2 id="commonjs-vs-esm" tabindex="-1">CommonJS VS ESM <a class="header-anchor" href="#commonjs-vs-esm" aria-label="Permalink to &quot;CommonJS VS ESM&quot;">​</a></h2><table tabindex="0"><thead><tr><th>对比项</th><th><strong>CommonJS (CJS)</strong></th><th><strong>ES Modules (ESM)</strong></th></tr></thead><tbody><tr><td><strong>默认环境</strong></td><td>Node.js（服务器端）</td><td>浏览器 &amp; Node.js</td></tr><tr><td><strong>导出方式</strong></td><td><code>module.exports</code> / <code>exports</code></td><td><code>export</code> / <code>export default</code></td></tr><tr><td><strong>导入方式</strong></td><td><code>require()</code></td><td><code>import</code></td></tr><tr><td><strong>加载方式</strong></td><td>同步（适用于服务器）</td><td>异步（适用于浏览器）</td></tr><tr><td><strong>执行时机</strong></td><td>运行时（<code>require</code> 是动态的）</td><td>编译时（<code>import</code> 是静态的）</td></tr><tr><td><strong>能否部分导入</strong></td><td>不能按需加载（除非使用解构）</td><td>可以按需导入特定的部分</td></tr><tr><td><strong>是否支持 <code>top-level await</code></strong></td><td>❌ 不支持</td><td>✅ 支持</td></tr><tr><td><strong>Tree Shaking</strong></td><td>❌ 不支持（Node.js 直接运行所有代码）</td><td>✅ 支持（浏览器可优化未使用代码）</td></tr><tr><td><strong>适用场景</strong></td><td>服务器端（Node.js）</td><td>现代浏览器、前端项目</td></tr></tbody></table><h2 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h2><h3 id="在浏览器中-异步任务分为两类" tabindex="-1">在浏览器中，异步任务分为两类： <a class="header-anchor" href="#在浏览器中-异步任务分为两类" aria-label="Permalink to &quot;在浏览器中，异步任务分为两类：&quot;">​</a></h3><ul><li><p><strong>宏任务（Macrotask）</strong>：Script 脚本、定时器、requestAnimationFrame、网络请求、事件监听、setImmediate、pushState h 和 replaceState 等等</p></li><li><p><strong>微任务（Microtask）</strong>：Promise、MutationObserver 和 queueMicrotask 等等</p></li></ul><p>浏览器的 Event Loop 大致执行流程如下：</p><p>1️. 执行同步代码（Script），即主线程上的所有代码。</p><p>2️. 执行所有微任务（Microtasks），直到清空微任务队列。</p><p>3️. 执行一个宏任务（Macrotask），例如 setTimeout()、setInterval()、I/O 事件等。</p><p>4️. 重复步骤 2 和 3，直到所有任务完成。</p><p>5️. 执行 UI 渲染（浏览器在必要时执行 页面重绘，通常在 Event Loop 的某些阶段执行）。</p><p>6️. 回到第 2 步，继续执行微任务 → 宏任务 → 微任务 → ...，形成循环。</p><h3 id="在-node-js-中-异步任务分为两类" tabindex="-1">在 Node.js 中，异步任务分为两类： <a class="header-anchor" href="#在-node-js-中-异步任务分为两类" aria-label="Permalink to &quot;在 Node.js 中，异步任务分为两类：&quot;">​</a></h3><ul><li><p><strong>宏任务（Macrotask）</strong>：定时器、网络请求、事件监听、setImmediate、I/O 任务等等</p></li><li><p><strong>微任务（Microtask）</strong>：Promise、process.nextTick 和 queueMicrotask 等等</p></li></ul><p>Node.js 的 Event Loop 大致执行流程如下：</p><h3 id="timers-阶段" tabindex="-1">Timers 阶段 <a class="header-anchor" href="#timers-阶段" aria-label="Permalink to &quot;Timers 阶段&quot;">​</a></h3><p>执行已设置的 定时器回调（setTimeout()、setInterval()）。 如果定时器已经超时，回调就会执行。</p><h3 id="i-o-callback-阶段" tabindex="-1">I/O Callback 阶段 <a class="header-anchor" href="#i-o-callback-阶段" aria-label="Permalink to &quot;I/O Callback 阶段&quot;">​</a></h3><p>执行 I/O 操作的回调（例如，网络请求、文件系统操作等）。 I/O 回调通常是 非阻塞 操作的结果。</p><h3 id="idle-prepare-阶段" tabindex="-1">Idle, Prepare 阶段 <a class="header-anchor" href="#idle-prepare-阶段" aria-label="Permalink to &quot;Idle, Prepare 阶段&quot;">​</a></h3><p>该阶段主要是用于内部操作，在 Node.js 内部进行一些任务处理。</p><h3 id="poll-阶段" tabindex="-1">Poll 阶段 <a class="header-anchor" href="#poll-阶段" aria-label="Permalink to &quot;Poll 阶段&quot;">​</a></h3><p>该阶段有两种不同的操作： 如果没有定时器需要执行，Event Loop 会阻塞等待 I/O 操作。 如果有定时器或回调任务需要执行，会继续执行它们。 Poll 阶段会持续 阻塞 I/O 操作，直到有回调可以执行或超时。 一旦没有更多的 I/O 任务，Node.js 会进入 检查阶段。</p><h3 id="check-阶段" tabindex="-1">Check 阶段 <a class="header-anchor" href="#check-阶段" aria-label="Permalink to &quot;Check 阶段&quot;">​</a></h3><p>执行 setImmediate() 回调。 这是唯一一个处理 setImmediate() 回调的阶段。</p><h3 id="close-callbacks-阶段" tabindex="-1">Close Callbacks 阶段 <a class="header-anchor" href="#close-callbacks-阶段" aria-label="Permalink to &quot;Close Callbacks 阶段&quot;">​</a></h3><p>执行关闭事件的回调，比如关闭的网络连接（例如 socket.on(&#39;close&#39;)）。</p>',44)]))}const u=e(d,[["render",s]]);export{m as __pageData,u as default};
